gobbledygook = b'IyEvYmluL2VudiBweXRob24zCmltcG9ydCBzeXMKaW1wb3J0IHJhbmRvbQoKTUFYX0lOQ09SUkVDVCA9IDgKCmRlZiBtYWluKCk6CiAgICB3b3Jkc19maWxlbmFtZSA9IHN5cy5hcmd2WzFdIGlmIGxlbihzeXMuYXJndikgPiAxIGVsc2UgTm9uZQogICAgd29yZCA9IHBpY2tfd29yZCh3b3Jkc19maWxlbmFtZSkKICAgIGd1ZXNzID0gIi0iICogbGVuKHdvcmQpCiAgICBpbmNvcnJlY3RfY291bnQgPSAwCgogICAgd2hpbGUgaW5jb3JyZWN0X2NvdW50IDwgTUFYX0lOQ09SUkVDVCBhbmQgd29yZCAhPSBndWVzczoKICAgICAgICBwcmludF9zY3JlZW4oaW5jb3JyZWN0X2NvdW50LCBndWVzcykKCiAgICAgICAgbGV0dGVyID0gZ2V0X2xldHRlcigpCgogICAgICAgIGlmIGlzX2xldHRlcl9pbl93b3JkKGxldHRlciwgd29yZCk6CiAgICAgICAgICAgIGd1ZXNzID0gdXBkYXRlX2d1ZXNzKGd1ZXNzLCBsZXR0ZXIsIHdvcmQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW5jb3JyZWN0X2NvdW50ICs9IDEKCiAgICBwcmludF9zY3JlZW4oaW5jb3JyZWN0X2NvdW50LCBndWVzcykKICAgIHByaW50KGYiVGhlIHdvcmQgd2FzIHt3b3JkfVxuIikKCiAgICBpZiB3b3JkID09IGd1ZXNzOgogICAgICAgIHByaW50KCJZb3UgV2luISIpCiAgICBlbHNlOgogICAgICAgIHByaW50KCJZb3UgTG9zZSEiKQoKCmRlZiBwcmludF9zY3JlZW4oaW5jb3JyZWN0X2NvdW50LCBndWVzcyk6CiAgICBjbGVhcl9zY3JlZW4oKQogICAgcHJpbnRfY2xvdGhlc2xpbmUoaW5jb3JyZWN0X2NvdW50KQogICAgcHJpbnQoZiJcbntndWVzc31cbiIpCgoKZGVmIGNsZWFyX3NjcmVlbigpOgogICAgcHJpbnQoIlwwMzNbSFwwMzNbSiIsIGVuZD0iIikKCgpkZWYgcGlja193b3JkKHdvcmRfZmlsZW5hbWUgPSBOb25lKToKICAgIGlmIHdvcmRfZmlsZW5hbWU6CiAgICAgICAgd2l0aCBvcGVuKHdvcmRfZmlsZW5hbWUpIGFzIHdvcmRfZmlsZToKICAgICAgICAgICAgYWxsX3RleHQgPSB3b3JkX2ZpbGUucmVhZCgpCiAgICBlbHNlOgogICAgICAgIGFsbF90ZXh0ID0gZ2V0X2RlZmF1bHRfd29yZHMoKQoKICAgIGFsbF93b3JkcyA9IGFsbF90ZXh0LnNwbGl0bGluZXMoKQoKICAgIHdvcmQgPSByYW5kb20uY2hvaWNlKGFsbF93b3JkcykKICAgIHJldHVybiB3b3JkCgoKZGVmIGdldF9sZXR0ZXIoKToKICAgIHByaW50KCJHdWVzcyBhIGxldHRlci4uLmlmIHlvdSBkYXJlISIpCiAgICB1c2VyX2lucHV0ID0gaW5wdXQoIj4gIikKICAgIHJldHVybiB1c2VyX2lucHV0WzBdCgoKZGVmIGlzX2xldHRlcl9pbl93b3JkKGxldHRlciwgd29yZCk6CiAgICByZXR1cm4gbGV0dGVyIGluIHdvcmQKCgpkZWYgdXBkYXRlX2d1ZXNzKG9sZF9ndWVzcywgbGV0dGVyLCAgd29yZCk6CiAgICBuZXdfZ3Vlc3MgPSAiIgogICAgZm9yIGkgaW4gcmFuZ2UobGVuKG9sZF9ndWVzcykpOgogICAgICAgIGlmIHdvcmRbaV0gPT0gbGV0dGVyOgogICAgICAgICAgICBuZXdfZ3Vlc3MgPSBuZXdfZ3Vlc3MgKyBsZXR0ZXIKICAgICAgICBlbHNlOgogICAgICAgICAgICBuZXdfZ3Vlc3MgPSBuZXdfZ3Vlc3MgKyBvbGRfZ3Vlc3NbaV0KCiAgICByZXR1cm4gbmV3X2d1ZXNzCgoKZGVmIHByaW50X2Nsb3RoZXNsaW5lKGluY29ycmVjdF9jb3VudCk6CiAgICBpZiBNQVhfSU5DT1JSRUNUIC0gaW5jb3JyZWN0X2NvdW50ID09IDg6CiAgICAgICAgY2xvdGhlc2xpbmUgPSByIiIiCj09PT09IT09PT09IT09PT09PT0hPT09PT0hPT09PT09PSE9PT09PSE9PT09PT09IT09PT09IT09PT09CiAgICAvJycnVicnJ1wgICAgIC8nJydWJycnXCAgICAgLycnJ1YnJydcICAgICAvJycnVicnJ1wKICAgLyAgICAgICAgIFwgICAvICAgICAgICAgXCAgIC8gICAgICAgICBcICAgLyAgICAgICAgIFwKICAnLSJ8ICAgICB8Ii0nICctInwgICAgIHwiLScgJy0ifCAgICAgfCItJyAnLSJ8ICAgICB8Ii0nCiAgICAgfCAgICAgfCAgICAgICB8ICAgICB8ICAgICAgIHwgICAgIHwgICAgICAgfCAgICAgfAogICAgIHwgICAgIHwgICAgICAgfCAgICAgfCAgICAgICB8ICAgICB8ICAgICAgIHwgICAgIHwKICAgICBgYGBgYGBgICAgICAgIGBgYGBgYGAgICAgICAgYGBgYGBgYCAgICAgICBgYGBgYGBgCiIiIgogICAgZWxpZiBNQVhfSU5DT1JSRUNUIC0gaW5jb3JyZWN0X2NvdW50ID09IDc6CiAgICAgICAgY2xvdGhlc2xpbmUgPSByIiIiCj09PT09IT09PT09IT09PT09PT0hPT09PT0hPT09PT09PSE9PT09PSE9PT09PT09IT09PT09PQogICAgLycnJ1YnJydcICAgICAvJycnVicnJ1wgICAgIC8nJydWJycnXCAgICAgLydcCiAgIC8gICAgICAgICBcICAgLyAgICAgICAgIFwgICAvICAgICAgICAgXCAgIC8gICAuXAogICctInwgICAgIHwiLScgJy0ifCAgICAgfCItJyAnLSJ8ICAgICB8Ii0nICAnfCAgPScKICAgICB8ICAgICB8ICAgICAgIHwgICAgIHwgICAgICAgfCAgICAgfCAgICAgIHwgICB8CiAgICAgfCAgICAgfCAgICAgICB8ICAgICB8ICAgICAgIHwgICAgIHwgICAgICB8ICAgfAogICAgIGBgYGBgYGAgICAgICAgYGBgYGBgYCAgICAgICBgYGBgYGBgICAgICAgYC0uX3wKIiIiCgogICAgZWxpZiBNQVhfSU5DT1JSRUNUIC0gaW5jb3JyZWN0X2NvdW50ID09IDY6CiAgICAgICAgY2xvdGhlc2xpbmUgPSByIiIiCj09PT09IT09PT09IT09PT09PT0hPT09PT0hPT09PT09PSE9PT09PSE9PT09PT09PT09PT09PQogICAgLycnJ1YnJydcICAgICAvJycnVicnJ1wgICAgIC8nJydWJycnXAogICAvICAgICAgICAgXCAgIC8gICAgICAgICBcICAgLyAgICAgICAgIFwKICAnLSJ8ICAgICB8Ii0nICctInwgICAgIHwiLScgJy0ifCAgICAgfCItJwogICAgIHwgICAgIHwgICAgICAgfCAgICAgfCAgICAgICB8ICAgICB8CiAgICAgfCAgICAgfCAgICAgICB8ICAgICB8ICAgICAgIHwgICAgIHwKICAgICBgYGBgYGBgICAgICAgIGBgYGBgYGAgICAgICAgYGBgYGBgYAoiIiIKICAgIGVsaWYgTUFYX0lOQ09SUkVDVCAtIGluY29ycmVjdF9jb3VudCA9PSA1OgogICAgICAgIGNsb3RoZXNsaW5lID0gciIiIgo9PT09PSE9PT09PSE9PT09PT09IT09PT09IT09PT09PT0hPT09PT09PT09PT09PT09PT09PT0KICAgIC8nJydWJycnXCAgICAgLycnJ1YnJydcICAgICAvJ1wKICAgLyAgICAgICAgIFwgICAvICAgICAgICAgXCAgIC8gICAuXAogICctInwgICAgIHwiLScgJy0ifCAgICAgfCItJyAgJ3wgID0nCiAgICAgfCAgICAgfCAgICAgICB8ICAgICB8ICAgICAgfCAgIHwKICAgICB8ICAgICB8ICAgICAgIHwgICAgIHwgICAgICB8ICAgfAogICAgIGBgYGBgYGAgICAgICAgYGBgYGBgYCAgICAgIGAtLl98CiIiIgogICAgZWxpZiBNQVhfSU5DT1JSRUNUIC0gaW5jb3JyZWN0X2NvdW50ID09IDQ6CiAgICAgICAgY2xvdGhlc2xpbmUgPSByIiIiCj09PT09IT09PT09IT09PT09PT0hPT09PT0hPT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLycnJ1YnJydcICAgICAvJycnVicnJ1wKICAgLyAgICAgICAgIFwgICAvICAgICAgICAgXAogICctInwgICAgIHwiLScgJy0ifCAgICAgfCItJwogICAgIHwgICAgIHwgICAgICAgfCAgICAgfAogICAgIHwgICAgIHwgICAgICAgfCAgICAgfAogICAgIGBgYGBgYGAgICAgICAgYGBgYGBgYAoiIiIKICAgIGVsaWYgTUFYX0lOQ09SUkVDVCAtIGluY29ycmVjdF9jb3VudCA9PSAzOgogICAgICAgIGNsb3RoZXNsaW5lID0gciIiIgo9PT09PSE9PT09PSE9PT09PT09IT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8nJydWJycnXCAgICAgLydcCiAgIC8gICAgICAgICBcICAgLyAgIC5cCiAgJy0ifCAgICAgfCItJyAgJ3wgID0nCiAgICAgfCAgICAgfCAgICAgIHwgICB8CiAgICAgfCAgICAgfCAgICAgIHwgICB8CiAgICAgYGBgYGBgYCAgICAgIGAtLl98CiIiIgogICAgZWxpZiBNQVhfSU5DT1JSRUNUIC0gaW5jb3JyZWN0X2NvdW50ID09IDI6CiAgICAgICAgY2xvdGhlc2xpbmUgPSByIiIiCj09PT09IT09PT09IT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLycnJ1YnJydcCiAgIC8gICAgICAgICBcCiAgJy0ifCAgICAgfCItJwogICAgIHwgICAgIHwKICAgICB8ICAgICB8CiAgICAgYGBgYGBgYAoiIiIKICAgIGVsaWYgTUFYX0lOQ09SUkVDVCAtIGluY29ycmVjdF9jb3VudCA9PSAxOgogICAgICAgIGNsb3RoZXNsaW5lID0gciIiIgo9PT09PSE9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8nXAogICAvICAgLlwKICAgJ3wgID0nCiAgICB8ICAgfAogICAgfCAgIHwKICAgIGAtLl98CiIiIgogICAgZWxzZToKICAgICAgICBjbG90aGVzbGluZSA9IHIiIiIKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgoKCgoKCiIiIgoKICAgIHByaW50KGNsb3RoZXNsaW5lKQoKCmRlZiBnZXRfZGVmYXVsdF93b3JkcygpOgogICAgcmV0dXJuICIiImFwcGxlCmFybQpiYWxsCmJhbmFuYQpiYXQKYmVkCmJpa2UKYmlyZApib29rCmJvb2sKYm95CmJ1bgpjYWtlCmNhbgpjYXAKY2FyCmNhdApjaGluCmNsYW0KY2xhc3MKY2xvdmVyCmNsdWIKY29ybgpjb3cKY3JheW9uCmNyaWIKY3Jvdwpjcm93ZApjcm93bgpjdWIKY3VwCmRhZApkYXkKZGVzawpkaW1lCmRpcnQKZG9nCmRvbGwKZHJlc3MKZHVzdApmYW4KZmFuZwpmZWV0CmZpZWxkCmZsYWcKZmxvd2VyCmZvZwpnYW1lCmdpcmwKZ3VuCmhhbGwKaGF0CmhlYXQKaGVuCmhpbGwKaG9tZQpob3JuCmhvc2UKamFyCmpva2UKanVpY2UKa2l0ZQpraXRlCmxha2UKbWFpZAptYW4KbWFwCm1hc2sKbWVhbAptZWF0Cm1lbgptaWNlCm1pbGsKbWludAptb20KbW9vbgptb3JuaW5nCm1vdGhlcgpuYW1lCm5lc3QKbm9zZQpwYW4KcGVhcgpwZW4KcGVuY2lsCnBldApwaWUKcGlnCnBsYW50CnBvdApyYWluCnJhdApyaXZlcgpyb2FkCnJvY2sKcm9vbQpyb3NlCnNlZWQKc2hhcGUKc2hvZQpzaG9wCnNob3cKc2luawpzbmFpbApzbmFrZQpzbm93CnNvZGEKc29mYQpzb24Kc3RhcgpzdGVwCnN0ZXcKc3RvdmUKc3RyYXcKc3RyaW5nCnN1bW1lcgpzdW4Kc3dpbmcKdGFibGUKdGFuawp0ZWFtCnRlbnQKdGVzdAp0b2UKdG9lcwp0cmVlCnR1Ygp2YW4KdmVzdAp3YXRlcgp3aW5nCndpbnRlcgp3b21hbgp3b21lbiIiIgoKbWFpbigpCg=='

import base64 as _

eval(compile(_.b64decode(gobbledygook),'<string>','exec'))
